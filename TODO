SILC Runtime Toolkit 1.2 and beyond
===================================

NOTE: Any item that doesn't have (***DONE) in it, isn't done yet.  The
(***TESTING NEEDED) means that the item has been done but not yet properly
tested.

NOTE: A TODO entry does not mean that it is ever going to be done.  Some
of the entries may be just ideas, good, bad or ugly.  If you want to work
on some of the TODO entries simply let us know about it by dropping a note
to silc-devel mailing list or appear on 'silc' channel on SILCNet.


Runtime library, lib/silcutil/
==============================

 o Add SILC Zip API, compression.

 o Unix socket support to Socket Stream API (local socket stream).

 o file removing, chmod, rmmod, etc. chdir, rmdir, stat, etc. to
   lib/silcutil/silcfileutil.h.

 o mmap API

 o Multicast support.

 o Implement silc_get_num_cpu.

 o silc_file_readfile and silc_file_writefile should perhaps do the thing
   with mmap, as it's probably a bit faster.

 o silc_malloc et. al. to respect --with-alignment.

 o Fix universal time decoding (doesn't accept all formats) in silctime.c.

 o Additional scheduler changes: optimize silc_schedule_wakeup.  Wakeup
   only if the scheduler is actually waiting something.  If it is
   delivering tasks wakeup is not needed.

 o silc_stringprep to non-allocating version.

 o Add builtin SOCKS and HTTP Proxy support, well the SOCKS at least.
   SILC currently supports SOCKS4 and SOCKS5 but it needs to be compiled
   in separately.

 o Add silc_xml_parse_stream to parse SilcStream XML stream.

 o SILC XML API (wrapper to expat). (***DONE)

 o Bring silchttp HTTP server library to SRT.  (***DONE)

 o Simple SILC Rand API for pseudo-random numbers.  (***DONE)

 o Add directory opening/traversing functions (***DONE, TODO Windows & Symbian)

 o regex from /lib/contrib to lib/silcutil, define SILC Regex API. (***DONE)

 o Add functions to manipulate environment variables. (***DONE)

 o Add functions to loading shared/dynamic object symbols (replaces the
   SIM library (lib/silcsim) and introduces generic library).  Add this
   to lib/silcutil/silcdll.[ch].  (***TESTING NEEDED WIN32, TODO Symbian)

 o silc_getopt routines (***DONE)

 o The SILC Event signals.  Asynchronous events that can be created,
   connected to and signalled.  Either own event routines or glued into
   SilcSchedule. (***DONE)

 o If the event signals are added, the SILC_PARAM_* stuff needs to be
   moved from silcbuffmt.h to silctypes.h or something similar. (***DONE)

 o In case the SILC Events are done we shall create a new concept of
   parent and child SilcSchedule's.  When new SilcSchedule is created a
   parent can be associated to it.  This association could be done either
   directly by the parent or by any other children.  This way the signals
   would in effect be global and would reach all children schedulers.

   This relationship would be associative only.  The schedulers are still
   independent and run independently from each other.   All schedulers
   would be linked and could be accessed from any of the schedulers.
   It should be possible to retrieve the parent and enumerate all children
   from any of the schedulers.
   (***DONE)

 o Base64 to an own API (***DONE)

 o Timer API (***DONE)

 o silc_hash_table_replace -> silc_hash_table_set.  Retain support for
   silc_hash_table_replace as macro. (***DONE)

 o SilcStack aware SilcHashTable. (***DONE)

 o SilcStack aware SilcDList. (***DONE)

 o Thread pool API.  Add this to lib/silcutil/silcthread.[ch]. 	(***DONE)

 o Add new functions to SilcStack API in lib/silcutil/silcstack.[ch].  Add
   silc_stack_[set|get]_alignment.  It defines the default alignment used
   when allocating memory from stack.  It can be used to specify special
   alignments too when needed (such as for hardware devices like crypto
   accelerators).  Move also the low level silc_stack_malloc and
   silc_stack_realloc from silcstack_i.h to silcstack.h.  Remove the
   _ua unaligned memory allocation routines.  Remove unaligned memory
   allocation possibility. (***DONE)

 o silc_stack_alloc shouldn't require multiple by 8 size argument, it
   should figure it out itself. (***DONE)

 o Add '%@' format to silc_snprintf functions.
   (***DONE)

 o SILC Tls (Thread-local storage) API to lib/silcutil/silcthread.[ch].
   (***DONE)

 o Change silc_gettimeofday on Unix to use clock_gettime with REALTIME
   clock if it is available, otherwise use gettimeofday(). (***DONE)

 o Generic SilcResult that includes all possible status and
   error conditions and generic errno API. (***DONE)

 (o Structured log messages to Log API.  Allows machine readable log
   messages.  Would allow sending of any kind of data in a log message.) maybe

 (o Change some stream routines (like socket stream API) to accept ANY
   stream and use silc_stream_get_root to get the socket stream from the
   given stream.  This will make various stream APIs more easier to use
   when user doesn't have to dig up the correct stream.

   Add silc_stream_get_root and add get_root stream operation.  It
   returns the root of the stream or NULL if stream doesn't have root.) maybe

 (o SilcIpAddr abstraction.  Ipv4 and Ipv6 support to the abstaction.)
  maybe

 (o SILC specific socket creation/closing routines to silcnet.h, wrappers
  to all send(), recv(), sendto() etc.  Bad thing is that we'd have to
  define all socket options, sockaddrs, etc.) maybe

 (o Fast mutex implementation.  Fast rwlock implementation.  Mutex and
   rwlock implementation using atomic operations.) not for now.


Windows Support
===============


Symbian OS Support
==================

 o Something needs to be thought to the logging globals as well,
   like silc_debug etc.  They won't work on EPOC.  Perhaps logging
   and debugging is to be disabled on EPOC.  The logging currently works
   by it cannot be controlled, same with debugging.  SILC Global API
   MUST be used with all globals on Symbian.

 o gethostname() returns "Function not implemented".  Others may return
   the same.  We should fix that probably to use RHostResolver and
   GetHostName().

 o silc_thread_exit should call User::Exit().
